version: 2
jobs:
  build:
    working_directory: /app
    docker:
      - image: docker:17.06.0-ce-git
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache \
              py2-pip=9.0.1-r1 curl=7.54.0-r0 jq
            pip install \
              docker-compose==1.14.0 \
              awscli==1.11.112 \
              httpie
      - run:
          name: Install Docker client
          command: |
            set -x
            VER="17.05.0-ce"
            curl -L -o /tmp/docker-$VER.tgz https://get.docker.com/builds/Linux/x86_64/docker-$VER.tgz
            tar -xz -C /tmp -f /tmp/docker-$VER.tgz
            mv /tmp/docker/* /usr/bin
      - restore_cache:
          keys:
            - v1-{{ .Branch }}
          paths:
            - /caches/app.tar
      - run:
          name: Load Docker image layer cache
          command: |
            set +o pipefail
            docker load -i /caches/app.tar | true
      - run:
          name: Build application Docker image
          command: |
            docker version
            docker build --build-arg IMAGE_NUMBER=25 --cache-from=app -t app .
      - run:
          name: Get Docker image size
          command: |
            mkdir /tmp/artifacts;
            docker images --format "{{.Size}}" app > /tmp/artifacts/size;
      - store_artifacts:
          path: /tmp/artifacts
      - run:
          name: Save Docker image layer cache
          command: |
            mkdir -p /caches
            docker save -o /caches/app.tar app
      - save_cache:
          key: v1-{{ .Branch }}-{{ epoch }}
          paths:
            - /caches/app.tar
      - run:
          name: Run image tests
          no_output_timeout: 1m
          command: |
            set -x
            docker run --rm app --help
      # - deploy:
      #     name: Push application Docker image
      #     command: |
      #       if [ "${CIRCLE_BRANCH}" == "master" ]; then
      #         login="$(aws ecr get-login)"
      #         ${login}
      #         docker tag app "${ECR_ENDPOINT}/app:${CIRCLE_SHA1}"
      #         docker push "${ECR_ENDPOINT}/app:${CIRCLE_SHA1}"
      #       fi